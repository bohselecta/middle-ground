generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Team {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  members   TeamMember[]
  projects  Project[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(member)
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

enum TeamRole {
  owner
  manager
  member
}

model User {
  id          String       @id @default(cuid())
  name        String
  role        String       // 'worker' | 'manager'
  teamId      String?
  email       String?      @unique
  image       String?
  shareTrends Boolean      @default(true)
  safeMode    Boolean      @default(false)

  // Auth relations
  accounts    Account[]
  sessions    Session[]

  // Team relations
  teamMemberships TeamMember[]

  // Project relations
  projects    Project[]

  // Agent relations
  agents      Agent[]

  // Existing relations
  reflections Reflection[]
  frictions   Friction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Reflection {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  mood      String   // 'low' | 'neutral' | 'high'
  note      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friction {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  tag       String   // 'meetings' | 'unclear' | 'context' | 'tools' | 'fatigue'
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experiment {
  id        String   @id @default(cuid())
  title     String
  status    String   @default("proposed") // 'proposed' | 'running' | 'done'
  start     DateTime?
  end       DateTime?
  rationale String?
  outcome   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OverrideLog {
  id        String   @id @default(cuid())
  managerId String
  reason    String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String   @id @default(cuid())
  teamId    String?
  ownerId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  agents    Agent[]
  tasks     Task[]
  messages  AgentMessage[]
}

model Agent {
  id        String      @id @default(cuid())
  projectId String
  userId    String?
  type      AgentType   // human | ai_manager | ai_worker
  role      String      // "manager" | "frontend" | "backend" | "docs"
  skills    String[]
  tools     String[]    // ["cursor","github","slack"]
  llm       String?
  status    AgentStatus @default(idle)
  lastSeen  DateTime    @default(now())
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id])
  messages  AgentMessage[]
  ownedTasks Task[]
}

enum AgentType { 
  human 
  ai_manager 
  ai_worker 
}

enum AgentStatus { 
  idle 
  thinking 
  waiting_approval 
  running 
  blocked 
  done 
}

model Task {
  id           String     @id @default(cuid())
  projectId    String
  title        String
  description  String?
  status       TaskStatus @default(todo)
  ownerAgentId String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ownerAgent   Agent?     @relation(fields: [ownerAgentId], references: [id])
  
  @@index([projectId, status])
}

enum TaskStatus { 
  todo 
  doing 
  review 
  done 
  blocked 
}

model AgentMessage {
  id        String      @id @default(cuid())
  projectId String
  agentId   String
  kind      MessageKind // plan | critique | action | result | report
  text      String
  data      Json?
  runId     String?
  model     String?
  createdAt DateTime    @default(now())
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  agent     Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

enum MessageKind { 
  plan 
  critique 
  action 
  result 
  report 
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id          String       @id @default(cuid())
  name        String
  role        String       // 'worker' | 'manager'
  teamId      String?
  email       String?      @unique
  image       String?
  shareTrends Boolean      @default(true)
  safeMode    Boolean      @default(false)

  // Auth relations
  accounts    Account[]
  sessions    Session[]

  // Existing relations
  reflections Reflection[]
  frictions   Friction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Reflection {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  mood      String   // 'low' | 'neutral' | 'high'
  note      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friction {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  tag       String   // 'meetings' | 'unclear' | 'context' | 'tools' | 'fatigue'
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experiment {
  id        String   @id @default(cuid())
  title     String
  status    String   @default("proposed") // 'proposed' | 'running' | 'done'
  start     DateTime?
  end       DateTime?
  rationale String?
  outcome   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OverrideLog {
  id        String   @id @default(cuid())
  managerId String
  reason    String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
